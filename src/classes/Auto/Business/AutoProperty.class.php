<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.0.10.99 at 2012-09-02 10:42:56                     *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoProperty extends NamedObject
	{
		protected $description = null;
		protected $user = null;
		protected $userId = null;
		protected $propertyType = null;
		protected $propertyTypeId = null;
		protected $offerType = null;
		protected $offerTypeId = null;
		protected $features = null;
		protected $image = null;
		protected $pictures = null;
		protected $location = null;
		protected $locationId = null;
		protected $created = null;
		protected $published = null;
		
		public function getDescription()
		{
			return $this->description;
		}
		
		/**
		 * @return Property
		**/
		public function setDescription($description)
		{
			$this->description = $description;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function getUser()
		{
			if (!$this->user && $this->userId) {
				$this->user = User::dao()->getById($this->userId);
			}
			
			return $this->user;
		}
		
		public function getUserId()
		{
			return $this->userId;
		}
		
		/**
		 * @return Property
		**/
		public function setUser(User $user)
		{
			$this->user = $user;
			$this->userId = $user->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setUserId($id)
		{
			$this->user = null;
			$this->userId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropUser()
		{
			$this->user = null;
			$this->userId = null;
			
			return $this;
		}
		
		/**
		 * @return PropertyType
		**/
		public function getPropertyType()
		{
			if (!$this->propertyType && $this->propertyTypeId) {
				$this->propertyType = new PropertyType($this->propertyTypeId);
			}
			
			return $this->propertyType;
		}
		
		public function getPropertyTypeId()
		{
			return $this->propertyTypeId;
		}
		
		/**
		 * @return Property
		**/
		public function setPropertyType(PropertyType $propertyType)
		{
			$this->propertyType = $propertyType;
			$this->propertyTypeId = $propertyType->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setPropertyTypeId($id)
		{
			$this->propertyType = null;
			$this->propertyTypeId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropPropertyType()
		{
			$this->propertyType = null;
			$this->propertyTypeId = null;
			
			return $this;
		}
		
		/**
		 * @return OfferType
		**/
		public function getOfferType()
		{
			if (!$this->offerType && $this->offerTypeId) {
				$this->offerType = new OfferType($this->offerTypeId);
			}
			
			return $this->offerType;
		}
		
		public function getOfferTypeId()
		{
			return $this->offerTypeId;
		}
		
		/**
		 * @return Property
		**/
		public function setOfferType(OfferType $offerType)
		{
			$this->offerType = $offerType;
			$this->offerTypeId = $offerType->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setOfferTypeId($id)
		{
			$this->offerType = null;
			$this->offerTypeId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropOfferType()
		{
			$this->offerType = null;
			$this->offerTypeId = null;
			
			return $this;
		}
		
		/**
		 * @return PropertyFeaturesDAO
		**/
		public function getFeatures($lazy = false)
		{
			if (!$this->features || ($this->features->isLazy() != $lazy)) {
				$this->features = new PropertyFeaturesDAO($this, $lazy);
			}
			
			return $this->features;
		}
		
		/**
		 * @return Property
		**/
		public function fillFeatures($collection, $lazy = false)
		{
			$this->features = new PropertyFeaturesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->features->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return Picture
		**/
		public function getImage()
		{
			return $this->image;
		}
		
		/**
		 * @return Property
		**/
		public function setImage(Picture $image)
		{
			$this->image = $image;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropImage()
		{
			$this->image = null;
			
			return $this;
		}
		
		/**
		 * @return PropertyPicturesDAO
		**/
		public function getPictures($lazy = false)
		{
			if (!$this->pictures || ($this->pictures->isLazy() != $lazy)) {
				$this->pictures = new PropertyPicturesDAO($this, $lazy);
			}
			
			return $this->pictures;
		}
		
		/**
		 * @return Property
		**/
		public function fillPictures($collection, $lazy = false)
		{
			$this->pictures = new PropertyPicturesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->pictures->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return City
		**/
		public function getLocation()
		{
			if (!$this->location && $this->locationId) {
				$this->location = City::dao()->getById($this->locationId);
			}
			
			return $this->location;
		}
		
		public function getLocationId()
		{
			return $this->locationId;
		}
		
		/**
		 * @return Property
		**/
		public function setLocation(City $location)
		{
			$this->location = $location;
			$this->locationId = $location->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setLocationId($id)
		{
			$this->location = null;
			$this->locationId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropLocation()
		{
			$this->location = null;
			$this->locationId = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getCreated()
		{
			return $this->created;
		}
		
		/**
		 * @return Property
		**/
		public function setCreated(Timestamp $created)
		{
			$this->created = $created;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropCreated()
		{
			$this->created = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getPublished()
		{
			return $this->published;
		}
		
		/**
		 * @return Property
		**/
		public function setPublished(Timestamp $published)
		{
			$this->published = $published;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropPublished()
		{
			$this->published = null;
			
			return $this;
		}
	}
?>