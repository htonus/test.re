<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.0.9 at 2012-07-01 16:43:04                         *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoProperty extends NamedObject
	{
		protected $description = null;
		protected $user = null;
		protected $userId = null;
		protected $price = null;
		protected $type = null;
		protected $typeId = null;
		protected $offer = null;
		protected $offerId = null;
		protected $features = null;
		
		public function getDescription()
		{
			return $this->description;
		}
		
		/**
		 * @return Property
		**/
		public function setDescription($description)
		{
			$this->description = $description;
			
			return $this;
		}
		
		/**
		 * @return User
		**/
		public function getUser()
		{
			if (!$this->user && $this->userId) {
				$this->user = User::dao()->getById($this->userId);
			}
			
			return $this->user;
		}
		
		public function getUserId()
		{
			return $this->userId;
		}
		
		/**
		 * @return Property
		**/
		public function setUser(User $user)
		{
			$this->user = $user;
			$this->userId = $user->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setUserId($id)
		{
			$this->user = null;
			$this->userId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropUser()
		{
			$this->user = null;
			$this->userId = null;
			
			return $this;
		}
		
		public function getPrice()
		{
			return $this->price;
		}
		
		/**
		 * @return Property
		**/
		public function setPrice($price)
		{
			$this->price = $price;
			
			return $this;
		}
		
		/**
		 * @return PropertyType
		**/
		public function getType()
		{
			if (!$this->type && $this->typeId) {
				$this->type = new PropertyType($this->typeId);
			}
			
			return $this->type;
		}
		
		public function getTypeId()
		{
			return $this->typeId;
		}
		
		/**
		 * @return Property
		**/
		public function setType(PropertyType $type)
		{
			$this->type = $type;
			$this->typeId = $type->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setTypeId($id)
		{
			$this->type = null;
			$this->typeId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropType()
		{
			$this->type = null;
			$this->typeId = null;
			
			return $this;
		}
		
		/**
		 * @return OfferType
		**/
		public function getOffer()
		{
			if (!$this->offer && $this->offerId) {
				$this->offer = new OfferType($this->offerId);
			}
			
			return $this->offer;
		}
		
		public function getOfferId()
		{
			return $this->offerId;
		}
		
		/**
		 * @return Property
		**/
		public function setOffer(OfferType $offer)
		{
			$this->offer = $offer;
			$this->offerId = $offer->getId();
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function setOfferId($id)
		{
			$this->offer = null;
			$this->offerId = $id;
			
			return $this;
		}
		
		/**
		 * @return Property
		**/
		public function dropOffer()
		{
			$this->offer = null;
			$this->offerId = null;
			
			return $this;
		}
		
		/**
		 * @return PropertyFeaturesDAO
		**/
		public function getFeatures($lazy = false)
		{
			if (!$this->features || ($this->features->isLazy() != $lazy)) {
				$this->features = new PropertyFeaturesDAO($this, $lazy);
			}
			
			return $this->features;
		}
		
		/**
		 * @return Property
		**/
		public function fillFeatures($collection, $lazy = false)
		{
			$this->features = new PropertyFeaturesDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->features->mergeList($collection);
			
			return $this;
		}
	}
?>